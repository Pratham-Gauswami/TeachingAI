@model List<TeachingAI1.Models.AssignmentViewModel>
@{
    ViewData["Title"] = "Assignments";
    Layout = "_TeacherLayout";
}

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h2 mb-1">Assignments</h1>
            <p class="text-muted">Manage and track student assignments</p>
        </div>
        <div>
            <a asp-action="CreateAssignment" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Create Assignment
            </a>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="courseFilter" class="form-label">Filter by Course</label>
                    <select class="form-select" id="courseFilter">
                        <option value="">All Courses</option>
                        <option value="1">Introduction to Programming</option>
                        <option value="2">Data Structures and Algorithms</option>
                        <option value="3">Web Development Fundamentals</option>
                        <option value="4">Database Management Systems</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="statusFilter" class="form-label">Filter by Status</label>
                    <select class="form-select" id="statusFilter">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="draft">Draft</option>
                        <option value="completed">Completed</option>
                        <option value="overdue">Overdue</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="sortBy" class="form-label">Sort By</label>
                    <select class="form-select" id="sortBy">
                        <option value="dueDate">Due Date</option>
                        <option value="title">Title</option>
                        <option value="course">Course</option>
                        <option value="submissionRate">Submission Rate</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="searchAssignment" class="form-label">Search</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchAssignment" placeholder="Search assignments...">
                        <button class="btn btn-primary" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Assignment Statistics -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="stat-card clickable">
                <div class="stat-card-body">
                    <div class="stat-card-icon" style="background: var(--gradient-1);">
                        <i class="fas fa-tasks"></i>
                    </div>
                    <div class="stat-card-info">
                        <h2 class="stat-card-title">@Model.Count</h2>
                        <p class="stat-card-text">Total Assignments</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card clickable">
                <div class="stat-card-body">
                    <div class="stat-card-icon" style="background: var(--gradient-2);">
                        <i class="fas fa-hourglass-half"></i>
                    </div>
                    <div class="stat-card-info">
                        <h2 class="stat-card-title">@Model.Count(a => a.Status == "Active")</h2>
                        <p class="stat-card-text">Active Assignments</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card clickable">
                <div class="stat-card-body">
                    <div class="stat-card-icon" style="background: var(--gradient-3);">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-card-info">
                        <h2 class="stat-card-title">@Model.Sum(a => a.SubmittedCount)</h2>
                        <p class="stat-card-text">Submissions</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card clickable">
                <div class="stat-card-body">
                    <div class="stat-card-icon" style="background: var(--gradient-4);">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="stat-card-info">
                        <h2 class="stat-card-title">@Model.Count(a => a.Status == "Overdue")</h2>
                        <p class="stat-card-text">Overdue Assignments</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Assignments List -->
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Assignment</th>
                            <th>Course</th>
                            <th>Due Date</th>
                            <th>Assigned Students</th>
                            <th>Submissions</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var assignment in Model)
                        {
                            <tr data-assignment-id="@assignment.Id">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="me-3">
                                            <i class="fas fa-file-alt fa-2x text-primary"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-0">@assignment.Title</h6>
                                            <small class="text-muted">@(assignment.Description?.Length > 50 ? assignment.Description.Substring(0, 50) + "..." : assignment.Description)</small>
                                        </div>
                                    </div>
                                </td>
                                <td>@assignment.CourseTitle</td>
                                <td>@assignment.DueDate.ToString("MMM dd, yyyy")</td>
                                <td>@assignment.AssignedStudents</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="progress flex-grow-1 me-2" style="height: 6px;">
                                            <div class="progress-bar" role="progressbar" 
                                                 style="width: @(assignment.AssignedStudents > 0 ? (assignment.SubmittedCount * 100 / assignment.AssignedStudents) : 0)%;" 
                                                 aria-valuenow="@(assignment.AssignedStudents > 0 ? (assignment.SubmittedCount * 100 / assignment.AssignedStudents) : 0)" 
                                                 aria-valuemin="0" 
                                                 aria-valuemax="100"></div>
                                        </div>
                                        <span>@assignment.SubmittedCount/@assignment.AssignedStudents</span>
                                    </div>
                                </td>
                                <td>
                                    @{
                                        string badgeClass = "bg-primary";
                                        switch (assignment.Status)
                                        {
                                            case "Active":
                                                badgeClass = "bg-primary";
                                                break;
                                            case "Draft":
                                                badgeClass = "bg-secondary";
                                                break;
                                            case "Completed":
                                                badgeClass = "bg-success";
                                                break;
                                            case "Overdue":
                                                badgeClass = "bg-danger";
                                                break;
                                        }
                                    }
                                    <span class="badge @badgeClass">@assignment.Status</span>
                                </td>
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="dropdownMenuButton@(assignment.Id)" data-bs-toggle="dropdown" aria-expanded="false">
                                            Actions
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton@(assignment.Id)">
                                            <li><a class="dropdown-item" asp-action="AssignmentDetails" asp-route-id="@assignment.Id"><i class="fas fa-eye me-2"></i>View Details</a></li>
                                            <li><a class="dropdown-item" asp-action="EditAssignment" asp-route-id="@assignment.Id"><i class="fas fa-edit me-2"></i>Edit</a></li>
                                            <li><a class="dropdown-item" asp-action="GradeSubmissions" asp-route-id="@assignment.Id"><i class="fas fa-clipboard-check me-2"></i>Grade Submissions</a></li>
                                            <li><a class="dropdown-item" href="#" onclick="sendReminder(@assignment.Id)"><i class="fas fa-bell me-2"></i>Send Reminder</a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteAssignmentModal" data-assignment-id="@assignment.Id" data-assignment-title="@assignment.Title"><i class="fas fa-trash-alt me-2"></i>Delete</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <nav aria-label="Page navigation" class="mt-4">
                <ul class="pagination justify-content-center">
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                    </li>
                    <li class="page-item active"><a class="page-link" href="#">1</a></li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>
                    <li class="page-item">
                        <a class="page-link" href="#">Next</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Delete Assignment Modal -->
<div class="modal fade" id="deleteAssignmentModal" tabindex="-1" aria-labelledby="deleteAssignmentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAssignmentModalLabel">Delete Assignment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the assignment "<span id="assignmentTitleToDelete"></span>"?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    This will permanently delete the assignment and all associated submissions. This action cannot be undone.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteAssignment">Delete Assignment</button>
            </div>
        </div>
    </div>
</div>

<!-- Reminder Modal -->
<div class="modal fade" id="reminderModal" tabindex="-1" aria-labelledby="reminderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reminderModalLabel">Send Reminder</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Send a reminder to students who haven't submitted their assignment yet?</p>
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="customizeMessage" value="1">
                    <label class="form-check-label" for="customizeMessage">
                        Customize the reminder message
                    </label>
                </div>
                <div class="mb-3 d-none" id="reminderMessageContainer">
                    <label for="reminderMessage" class="form-label">Reminder Message</label>
                    <textarea class="form-control" id="reminderMessage" rows="3">This is a friendly reminder that your assignment is due soon. Please make sure to submit your work before the deadline.</textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="sendReminderBtn">Send Reminder</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .stat-card {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            overflow: hidden;
            margin-bottom: 1rem;
            height: 100%;
        }
        
        .stat-card.clickable {
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .stat-card.clickable:hover {
            transform: translateY(-5px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        }
        
        .stat-card-body {
            display: flex;
            padding: 1.25rem;
            align-items: center;
        }
        
        .stat-card-icon {
            width: 48px;
            height: 48px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: white;
        }
        
        .stat-card-info {
            flex: 1;
        }
        
        .stat-card-title {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
            line-height: 1;
        }
        
        .stat-card-text {
            font-size: 0.875rem;
            color: #6c757d;
            margin-bottom: 0;
        }
        
        :root {
            --gradient-1: linear-gradient(45deg, #4e73df, #224abe);
            --gradient-2: linear-gradient(45deg, #36b9cc, #1a8997);
            --gradient-3: linear-gradient(45deg, #1cc88a, #169b6b);
            --gradient-4: linear-gradient(45deg, #f6c23e, #dda20a);
        }
    </style>
}

@section Scripts {
    <script src="~/js/assignment-dashboard.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set up the delete assignment modal
            const deleteModal = document.getElementById('deleteAssignmentModal');
            if (deleteModal) {
                deleteModal.addEventListener('show.bs.modal', function(event) {
                    // Get the button that triggered the modal
                    const button = event.relatedTarget;
                    
                    // Extract info from data attributes
                    const assignmentId = button.getAttribute('data-assignment-id');
                    const assignmentTitle = button.getAttribute('data-assignment-title');
                    
                    // Update the modal content
                    const assignmentTitleElement = document.getElementById('assignmentTitleToDelete');
                    if (assignmentTitleElement) {
                        assignmentTitleElement.textContent = assignmentTitle;
                    }
                    
                    // Setup the confirm delete button
                    const confirmButton = document.getElementById('confirmDeleteAssignment');
                    if (confirmButton) {
                        confirmButton.setAttribute('data-assignment-id', assignmentId);
                    }
                });
            }
            
            // Customize reminder message toggle
            const customizeMessageCheckbox = document.getElementById('customizeMessage');
            const reminderMessageContainer = document.getElementById('reminderMessageContainer');
            
            if (customizeMessageCheckbox && reminderMessageContainer) {
                customizeMessageCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        reminderMessageContainer.classList.remove('d-none');
                    } else {
                        reminderMessageContainer.classList.add('d-none');
                    }
                });
            }
            
            // Send reminder button
            const sendReminderBtn = document.getElementById('sendReminderBtn');
            if (sendReminderBtn) {
                sendReminderBtn.addEventListener('click', function() {
                    const assignmentId = this.getAttribute('data-assignment-id');
                    const message = document.getElementById('reminderMessage').value;
                    
                    // Show loading state
                    this.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Sending...';
                    this.disabled = true;
                    
                    // Simulate API call with a timeout
                    setTimeout(() => {
                        // Hide the modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('reminderModal'));
                        modal.hide();
                        
                        // Show success message
                        showAlert('Reminder sent successfully to students', 'success');
                        
                        // Reset the button
                        this.innerHTML = 'Send Reminder';
                        this.disabled = false;
                    }, 1500);
                });
            }
        });
        
        function sendReminder(assignmentId) {
            // Find the assignment title
            const row = document.querySelector(`tr[data-assignment-id="${assignmentId}"]`);
            const title = row ? row.querySelector('h6').textContent : 'this assignment';
            
            // Set the assignment ID on the send button
            const sendButton = document.getElementById('sendReminderBtn');
            if (sendButton) {
                sendButton.setAttribute('data-assignment-id', assignmentId);
            }
            
            // Update modal title
            const modalTitle = document.getElementById('reminderModalLabel');
            if (modalTitle) {
                modalTitle.textContent = `Send Reminder for "${title}"`;
            }
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('reminderModal'));
            modal.show();
        }
        
        function showAlert(message, type = 'info') {
            // Create alert element
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.setAttribute('role', 'alert');
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            // Add to the page
            const container = document.querySelector('.container-fluid');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    alertDiv.classList.remove('show');
                    setTimeout(() => alertDiv.remove(), 150);
                }, 5000);
            }
        }
    </script>
} 